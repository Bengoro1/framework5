#! /usr/bin/env node

require('total5');

const ARGS = process.argv;
const DIR = process.cwd();

function done() {
	console.log('');
	console.timeEnd('[Done]');
}

function load(args) {

	var cmd = args[2].replace(/-{2,}/g, '');
	var arg = [];
	for (let i = 3; i < args.length; i++)
		arg.push(args[i].trim().replace(/"/g, ''));

	if ((/^\d+$/).test(cmd)) {
		arg.unshift(+cmd);
		cmd = 'server';
	}

	if (!cmd)
		cmd = 'help';

	var divider = '|-----------------------------------------------';
	console.log(divider);
	console.log('| Total.js v5');
	console.log('| Command: [' + cmd.capitalize() + ']');
	console.log(divider);
	console.time('[Done]');

	var fn = FUNC[cmd];
	fn && fn.apply(global, arg);
}

setTimeout(load, 10, ARGS);

FUNC.help = function() {
	console.log('translate                : it makes a resource file with a localized dictionary from the current directory');
	console.log('minify <filename>        : it minifies .js, .css and .html files');
	console.log('bundle <filename>        : it makes a bundle from the current directory');
	console.log('extract <filename>       : it extracts a bundle into the current directory');
	console.log('edit <url?id=project>    : it opens remote editing of the current directory with the Total.js Code Editor');
	console.log('8000                     : it starts a web server on port "8000" for the current directory');
	done();
};

FUNC.translate = function(filename) {

	var translate = function(value) {

		var index = -1;
		var dictionary = {};

		while (true) {

			index = value.indexOf('@(', index);

			if (index === -1)
				break;

			var counter = 0;
			for (let i = index + 2; i < value.length; i++) {

				var c = value[i];

				if (c == '(') {
					counter++;
				} else if (c === ')') {

					if (counter) {
						counter--;
						continue;
					}

					let text = value.substring(index, i + 1);
					let translate = text.substring(2, text.length - 1);
					let key = 'T' + translate.hash(true).toString(36);
					dictionary[key] = translate;
					index += text.length - 2;
					break;
				}
			}
		}

		return dictionary;
	};

	var extensions = { html: true, js: true };

	U.ls(DIR, function(files) {

		var dictionary = {};

		for (let filename of files) {
			let body = F.Fs.readFileSync(filename, 'utf8');
			let dict = translate(body);
			for (let key in dict)
				dictionary[key] = dict[key];
		}

		let builder = [];
		for (let key in dictionary)
			builder.push(key.padRight(12, ' ') + ' : ' + dictionary[key]);

		F.Fs.writeFileSync(filename || 'translate.resource', builder.join('\n'), 'utf8');
		done();

	}, (filename, isdir) => isdir ? true : extensions[U.getExtension(filename)]);

};

FUNC.bundle = function(filename) {

	if (!filename)
		filename = 'app.bundle';

	let ignore = {};
	ignore['/bundle.json'] = 1;
	ignore['/debug.js'] = 1;
	ignore['/debug.js.json'] = 1;
	ignore['/debug.pid'] = 1;
	ignore['/release.js'] = 1;
	ignore['/release.js.json'] = 1;
	ignore['/release.pid'] = 1;
	ignore['/index.js'] = 1;
	ignore['/index.js.json'] = 1;
	ignore['/index.pid'] = 1;
	ignore['/package.json'] = 1;
	ignore['/readme.md'] = 1;
	ignore['/license.txt'] = 1;
	ignore['/bundles/'] = 1;
	ignore['/tmp/'] = 1;
	ignore['/.src/'] = 1;

	if (filename[0] !== '/')
		ignore['/' + filename] = 1;
	else
		ignore[filename] = 1;

	ignore['/.git/'] = 1;

	if (filename.toLowerCase().lastIndexOf('.bundle') === -1)
		filename += '.bundle';

	ignore[filename] = 1;

	F.backup(filename, DIR, function() {
		done();
	}, path => ignore[path] == null);

};

FUNC.extract = function(filename) {

};

FUNC.minify = function(filename) {

};

FUNC.server = function(port) {

};

FUNC.edit = function(url) {

};